plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'jacoco'
	id 'com.google.cloud.tools.jib' version '3.4.5'
}

group = 'org.khube'
version = '0.0.1-SNAPSHOT'

sonarqube {
	properties {
		property "sonar.projectKey", project.findProperty("sonar.projectKey")
		property "sonar.projectName", project.findProperty("sonar.projectName")
		property "sonar.host.url", project.findProperty("sonar.host.url")
		property "sonar.token", project.findProperty("sonar.token")
		property "sonar.sources", project.findProperty("sonar.sources")
		property "sonar.tests", project.findProperty("sonar.tests")
		property "sonar.java.binaries", project.findProperty("sonar.java.binaries")
		property "sonar.sourceEncoding", project.findProperty("sonar.sourceEncoding")
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: [
							'**/com/in/TestServiceApplication.class'
					])
				})
		)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2025.0.0")
}

bootJar {
	archiveBaseName.set('employee-service')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'


	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << "-g"
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = 'employee-service.jar'
}